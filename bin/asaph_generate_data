#!/usr/bin/env python

"""
Command-line tool for generating synthetic genetic data for testing and validation purposes.
This tool creates simulated VCF files with random genetic variants, population assignment files
with specified numbers of populations, and phenotype label files for categorical traits.
It provides configurable parameters for the number of individuals, SNPs, populations, and phenotypes,
enabling the creation of controlled test datasets for evaluating genetic analysis pipelines
and validating statistical methods on known data structures.

Copyright 2017 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

import argparse
import gzip
import random

HEADER_LEFT = "#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT"

def snp_generator(n_individuals, n_snps):
    for _ in range(n_snps):
        yield [(random.randint(0, 1),
                random.randint(0, 1))
               for j in range(n_individuals)]

def generate_lines(n_individuals, n_snps):
    header = [HEADER_LEFT]
    for i in range(n_individuals):
        header.append(str(i))
    header = "\t".join(header)

    yield header

    for i, snps in enumerate(snp_generator(n_individuals, n_snps)):
        cols = ["1", str(i), ".", "A", "T", "0", "PASS", "AC=30;AF=0.357;AN=84;DP=804;PercentNBaseSolid=0.0000;set=AGC", "GT"]
        for allele1, allele2 in snps:
            cols.append(str(allele1) + "/" + str(allele2))

        yield "\t".join(cols)

def vcf_writer(flname, stream):
    with open(flname, "w", encoding="utf-8") as fl:
        for ln in stream:
            fl.write(ln)
            fl.write("\n")

def vcf_gz_writer(flname, stream):
    with gzip.open(flname, "wt", encoding="utf-8") as fl:
        for ln in stream:
            fl.write(ln)
            fl.write("\n")

def pops_writer(flname, n_individuals, n_populations):
    pops = dict()
    for i in range(n_populations):
        name = "population%s" % (i+1)
        pops[name ] = []

    for i in range(n_individuals):
        pop = random.sample(list(pops.keys()), 1)[0]
        pops[pop].append(str(i))

    with open(flname, "w", encoding="utf-8") as fl:
        for key, value in pops.items():
            fl.write(key)
            fl.write(",")
            fl.write(",".join(value))
            fl.write("\n")

def phenotype_labels_writer(flname, n_individuals, n_phenotypes):
    with open(flname, "w", encoding="utf-8") as fl:
        # specify first column is sample id,
        # second is categorical
        fl.write("id\tc\n")
        for i in range(n_individuals):
            l = i % n_phenotypes
            fl.write("%s\t%s\n" % (i, l))

def parseargs():
    parser = argparse.ArgumentParser()

    exclusion = parser.add_mutually_exclusive_group(required=True)
    exclusion.add_argument("--output-vcf",
                           type=str)

    exclusion.add_argument("--output-vcf-gz",
                           type=str)

    parser.add_argument("--output-populations",
                        type=str,
                        required=True)

    parser.add_argument("--individuals",
                        type=int,
                        required=True)

    parser.add_argument("--snps",
                        type=int,
                        required=True)

    parser.add_argument("--seed",
                        type=int,
                        required=False)

    parser.add_argument("--n-populations",
                        type=int,
                        required=True)

    parser.add_argument("--n-phenotypes",
                        type=int,
                        required=True)

    parser.add_argument("--output-phenotypes",
                        type=str,
                        required=True)

    return parser.parse_args()


if __name__ == "__main__":
    args = parseargs()

    if args.seed:
        random.seed(args.seed)

    pops_writer(args.output_populations,
                args.individuals,
                args.n_populations)

    phenotype_labels_writer(args.output_phenotypes,
                            args.individuals,
                            args.n_phenotypes)

    if args.output_vcf:
        vcf_writer(args.output_vcf,
                   generate_lines(args.individuals, args.snps))
    elif args.output_vcf_gz:
        vcf_gz_writer(args.output_vcf_gz,
                      generate_lines(args.individuals, args.snps))
