#!/usr/bin/env python3

"""
Copyright 2017 Ronald J. Nowling

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
"""

"""
Command-line tool for performing population association tests on genetic variant data.
This tool reads VCF files and population assignments, then performs chi-square contingency tests
on each genetic variant to identify significant associations between allele frequencies and population
structure. It filters invariant sites and outputs p-values for each variant, providing a statistical
framework for detecting genetic differentiation between populations and identifying candidate loci
underlying population structure or selection.
"""

import argparse
from collections import defaultdict
import os
import sys

import joblib
import numpy as np
from scipy import stats

from asaph.newioutils import deserialize
from asaph.newioutils import PROJECT_SUMMARY_FLNAME
from asaph.vcf import filter_invariants
from asaph.vcf import VCFStreamer

def read_sample_pops(flname):
    sample_pops = dict()
    with open(flname) as fl:
        for ln in fl:
            cols = ln.strip().split(",")
            pop_name = cols[0]
            for sample_name in cols[1:]:
                sample_pops[sample_name] = pop_name
    return sample_pops

def run_association_tests(variants, populations):
    for variant_label, _, genotypes in variants:
            pair_counts = defaultdict(int)
            all_pops = set()
            for i, (sample_name, (ref_count, alt_count)) in enumerate(genotypes):
                pop = populations[sample_name]
                if (ref_count, alt_count) != (0, 0):
                    pair_counts[(0, pop)] += 2.0 * ref_count
                    pair_counts[(1, pop)] += 2.0 * alt_count
                else:
                    # 2 * 1,1 2,0  0,2 = 4, 4
                    pair_counts[(0, pop)] += 4.0
                    pair_counts[(1, pop)] += 4.0
                all_pops.add(pop)

            table = np.zeros((2, len(all_pops)))
            for c, pop in enumerate(all_pops):
                table[0, c] += pair_counts[(0, pop)]
                table[1, c] += pair_counts[(1, pop)]

            table /= 4.0

            # divide by alleles
            _, pvalue, _, _ = stats.chi2_contingency(table)

            if np.isnan(pvalue) or np.isinf(pvalue):
                pvalue = 1.0

            yield variant_label, pvalue

def write_test_results(flname, test_stream):    
    with open(flname, "w") as fl:
        next_output = 1

        headers = ["component", "chrom", "pos", "pvalue"]
        fl.write("\t".join(headers))
        fl.write("\n")

        for i, ((pos_label), pvalue) in enumerate(test_stream):
            chrom, pos = pos_label
            if i == next_output:
                print(i, "Position", pos_label, "has p-value", pvalue)
                next_output *= 2

            fl.write("\t".join(["1", chrom, str(pos), "%.2E" % pvalue]))
            fl.write("\n")
            
def parseargs():
    parser = argparse.ArgumentParser(description="Asaph - Population Association Tests")

    format_group = parser.add_mutually_exclusive_group(required=True)
    format_group.add_argument("--vcf", type=str, help="VCF file to import")
    format_group.add_argument("--vcf-gz", type=str, help="Gzipped VCF file to import")

    parser.add_argument("--allele-min-freq-threshold",
                        type=float,
                        help="Minimum allele frequency allowed",
                        default=0.000001)

    parser.add_argument("--output-tsv",
                        type=str,
                        help="Output file",
                        required=True)

    parser.add_argument("--population-fl",
                        type=str,
                        required=True)

    return parser.parse_args()

if __name__ == "__main__":
    args = parseargs()

    if args.vcf is not None:
        flname = args.vcf
        gzipped = False
    else:
        flname = args.vcf_gz
        gzipped = True

    sample_pops = read_sample_pops(args.population_fl)
    print(sample_pops)
    
    stream = VCFStreamer(flname,
                         gzipped,
                         kept_individuals = list(sample_pops.keys()))
    filtered_variants = filter_invariants(args.allele_min_freq_threshold,
                                          stream)

    test_stream = run_association_tests(filtered_variants,
                                        sample_pops)

    write_test_results(args.output_tsv,
                       test_stream)
